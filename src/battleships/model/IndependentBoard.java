/*
 * Copyright (c) 2015. Shen Yichen <2007.yichen@gmail.com>
 * Under The MIT License.
 */
package battleships.model;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;


/**
 * An implementation of Board that calculates probability independently for each
 * {@code Ship}.
 * <p>
 * This board attempts to fit each ship into all possible configurations. The
 * total number is tallied individually for each ship. Total probability is
 * summed up linearly, treating each ship's probability as independent.
 * <p>
 * P{A &#8746; B} = P{A} + P{B} - P{A &#8745; B}
 * <p>
 * Note that this will ignore the fact that a placing of a certain ship
 * invalidates certain positions of another ship . As such there are limitations
 * to the accuracies of the probability derived.
 * <p>
 * Using only the ship placement count map generated by {@code getShipsMatrix()}
 * would generally be preferred.
 *
 * @author Shen Yichen <2007.yichen@gmail.com>
 * @see Ship
 * @since v1.0.0
 */
public class IndependentBoard implements Board {

    /**
     * States of a square on the board.
     */
    public enum SquareState {

        /**
         * When square is open and untouched.
         */
        OPEN,
        /**
         * When the square is confirmed to be empty.
         */
        MISS,
        /**
         * When the square is confirmed to be occupied.
         */
        HIT,
        /**
         * When the square is occupied by a sunken ship.
         */
        SUNK
    }

    // <editor-fold desc="Class variables">
    /**
     * For storing the state of the board.
     */
    private SquareState[][] board;
    /**
     * Stores the list of ships.
     */
    private Collection<Ship> ships;
    /**
     * Stores the possible configurations of all ships.
     * <p>
     * Each configuration is given an incremental ID.
     */
    private SortedMap<Integer, Collection<Square>> possibleShipConfigs;
    /**
     * Stores a link from a square to a configuration that affects it.
     */
    private ArrayList<ArrayList<Collection<Integer>>> reverseMap;
    /**
     * Stores a link from ship to configurations involving it.
     */
    private Map<Ship, Collection<Integer>> shipToConfigID;
    /**
     * Stores boards of possible configurations on each square, one for each
     * ship.
     */
    private Map<Ship, Integer[][]> shipCounter;
    /**
     * Stores the total number of configurations for each ship.
     */
    private Map<Ship, Integer> totalCounter;
    // </editor-fold>

    /**
     * Creates a board with given width and height.
     *
     * @param width The board width in squares
     * @param height The board height in squares
     */
    public IndependentBoard(int width, int height) {
        if (width <= 0 || height <= 0) {
            throw new IllegalArgumentException("Board width/height must be bigger than 0!");
        }

        board = new SquareState[width][];
        reverseMap = new ArrayList<>(width);
        shipToConfigID = new HashMap<>();

        for (int i = 0; i < board.length; i++) {
            board[i] = new SquareState[height];
            reverseMap.add(new ArrayList<>(height));

            for (int j = 0; j < board[i].length; j++) {
                board[i][j] = SquareState.OPEN;
                //Using array to store reverse mapping indices, change implementation here
                reverseMap.get(i).add(new ArrayList<>());
            }
        }

        shipCounter = new HashMap<>();
        totalCounter = new HashMap<>();

        ships = new ArrayList<>();
        possibleShipConfigs = new TreeMap<>();
    }

    @Override
    public int getWidth() {
        return board.length;
    }

    @Override
    public int getHeight() {
        //Width is guaranteed to be at least 1
        return board[0].length;
    }

    /**
     * Gets the probability matrix for all ships on this board.
     * <p>
     * Each square on the board is given a probability that any ship may occupy
     * that square.
     * <p>
     * Warning: Overall probabilities calculated by this board is linear, and
     * are not exact! It is preferred to use {@code getShipsMatrix()} in this
     * case.
     *
     * @return Probability matrix
     * @see #getShipsMatrix()
     */
    @Override
    public Double[][] getProbabilityMatrix() {
        Double[][] summedProbMatrix = new Double[getWidth()][getHeight()];

        for (Double[] summedProbMatrixCol : summedProbMatrix) {
            for (int j = 0; j < summedProbMatrixCol.length; j++) {
                summedProbMatrixCol[j] = 0.0;
            }
        }

        for (Ship ship : ships) {
            boardMapper(summedProbMatrix,
                    ship,
                    (int newVal, Double orgVal, int total) -> {
                        double newProb = (double) newVal / total;
                        return orgVal + newProb - orgVal * newProb;
                    });
        }
        //P(A or B) = P(A) + P(B) - P(A and B)
        //P(A and B) = P(A)P(B) as we are assuming they are independent

        return summedProbMatrix;
    }

    @Override
    public Double[][] getProbabilityMatrix(Ship ship) {
        Double[][] probMatrix = new Double[getWidth()][getHeight()];

        boardMapper(probMatrix, ship, (int newVal, Double orgVal, int total) -> ((double) newVal) / total);

        return probMatrix;
    }

    @Override
    public Integer[][] getShipsMatrix() {
        Integer[][] sumMatrix = new Integer[getWidth()][getHeight()];

        for (Integer[] sumMatrixCol : sumMatrix) {
            for (int j = 0; j < sumMatrixCol.length; j++) {
                sumMatrixCol[j] = 0;
            }
        }

        ships.stream().forEach((ship) -> {
            boardMapper(sumMatrix, ship, (int newVal, Integer orgVal, int total) -> orgVal + newVal);
        });

        return sumMatrix;
    }

    @Override
    public Integer[][] getShipsMatrix(Ship ship) {
        Integer[][] copyMatrix = new Integer[getWidth()][getHeight()];

        boardMapper(copyMatrix, ship, (int newVal, Integer orgVal, int total) -> newVal);

        return copyMatrix;
    }

    @Override
    public void addShip(Ship ship) {
        ships.add(ship);

        Integer[][] counterMatrix = new Integer[getWidth()][getHeight()];
        for (int i = 0; i < getWidth(); i++) {
            for (int j = 0; j < getHeight(); j++) {
                counterMatrix[i][j] = 0;
            }
        }
        shipCounter.put(ship, counterMatrix);
        totalCounter.put(ship, 0);
        shipToConfigID.put(ship, new ArrayList<>());
        genMap(ship);
    }

    @Override
    public Collection<Ship> getShips() {
        return new ArrayList<>(ships);
    }

    @Override
    public boolean shipWithinBoard(Ship ship, int x, int y) {
        return x >= 0 && x < getWidth() - ship.getMaxSquare().getX()
                && y >= 0 && y < getHeight() - ship.getMaxSquare().getY();
    }

    @Override
    public boolean shipWithinBoard(Ship ship, Square sqr) {
        return shipWithinBoard(ship, sqr.getX(), sqr.getY());
    }

    /**
     * Check if the ship could fit onto the board starting at the specified
     * position, without interference from obstacles.
     *
     * @param ship The ship
     * @param x The starting x-position
     * @param y The starting y-position
     * @return {@code true} if the ship can fit, {@code false} if the ship
     * cannot fit
     */
    protected boolean checkConfig(Ship ship, int x, int y) {
        boolean fits = shipWithinBoard(ship, x, y);

        if (fits) {
            for (Square square : ship) {
                int checkX = x + square.getX();
                int checkY = y + square.getY();

                //TODO Consider special case for HIT?
                fits &= (board[checkX][checkY] == SquareState.OPEN || board[checkX][checkY] == SquareState.HIT);
            }
        }

        return fits;
    }

    /**
     * Maps ship count values to a computed value stored in resultMatrix.
     * <p>
     * This method takes in an matrix and loops through each of the cells of the
     * board, setting the value of the provided matrix with the return value of
     * the function provided.
     *
     * @param resultMatrix Matrix to operate on (must be the same size as the
     * board!)
     * @param ship The ship to map for
     * @param folder Function that takes in (boardCellData, originalMatrixData,
     * shipTotalCount) and returns a new value to assign to the matrix.
     * @param <T> The data type of the matrix cells
     */
    protected <T> void boardMapper(T[][] resultMatrix, Ship ship, ShipFold<T> folder) {
        Integer[][] shipMatrix = shipCounter.get(ship);

        for (int i = 0; i < shipMatrix.length; i++) {
            Integer[] col = shipMatrix[i];

            for (int j = 0; j < col.length; j++) {
                resultMatrix[i][j] = folder.fold(col[j], resultMatrix[i][j], totalCounter.get(ship));
            }
        }
    }

    /**
     * Adds a new configuration to the map, using the squares on ship.
     * <p>
     * This method will use the key supplied as the configuration identifier,
     * but will throw an {@code
     * IllegalArgumentException} if the key is already present in the mappings.
     * <p>
     * This method also throws an {@code IllegalArgumentException} if the
     * rotated ship is out of the board, but DOES NOT check is the config
     * overlaps illegal squares e.g. {@code SquareState.MISS}.
     * <p>
     * You should supply both the original ship, and the ship that has been
     * rotated. The original ship will be used for mapping and the rotated to
     * set up positions.
     *
     * @param orgShip The ship for mapping
     * @param shipRotated The ship, rotated for the config
     * @param key The key to identify the config
     * @param x The starting x position of the config
     * @param y The starting y position of the config
     */
    void addConfig(Ship orgShip, Ship shipRotated, int key, int x, int y) {
        if (possibleShipConfigs.containsKey(key)) {
            throw new IllegalArgumentException("Config key supplied already exists! key: " + key);
        }
        if (!ships.contains(orgShip)) {
            throw new IllegalArgumentException("Unknown original ship supplied");
        }

        //Check if ship is within board
        if (!shipWithinBoard(shipRotated, x, y)) {
            throw new IllegalArgumentException(String.format(
                    "Ship is not contained within board!\n(x, y): (%d, %d)\nAccepted Range => x: [0, %d], y: [0, %d]",
                    x,
                    y,
                    getWidth() - shipRotated.getMaxSquare().getX(),
                    getHeight() - shipRotated.getMaxSquare().getY()));
        }

        Collection<Square> coords = new ArrayList<>(shipRotated.numSquares());

        for (Square square : shipRotated) {
            int checkX = x + square.getX();
            int checkY = y + square.getY();

            //Add coords to list
            coords.add(new Square(checkX, checkY));
            //Reverse Map
            reverseMap.get(checkX).get(checkY).add(key);
            //Add to square count
            shipCounter.get(orgShip)[checkX][checkY]++;
        }

        possibleShipConfigs.put(key, coords);
        shipToConfigID.get(orgShip).add(key);
        totalCounter.put(orgShip, totalCounter.get(orgShip) + 1);
    }

    /**
     * Generates mapping for a given ship.
     * <p>
     * This method adds 3 mappings.
     * <p>
     * One giving an incremental index to a fitted configuration coordinate
     * list.
     * <p>
     * One matching squares that are affected by this configuration to the
     * index.
     * <p>
     * And one that matches ships to the index.
     * <p>
     * Make sure {@code shipCounter} and {@code totalCounter} are initialize for
     * the ship before calling.
     *
     * @param ship Ship to generate mapping for.
     */
    private void genMap(Ship ship) {
        Ship rotatedShip = ship;

        for (int i = 0; i < 4; i++) {
            //Just consider all, let checkConfig figure out if ship is outside board
            for (int x = 0; x < board.length; x++) {
                SquareState[] col = board[x];
                for (int y = 0; y < col.length; y++) {
                    //Try each config and add to config list if config is a valid fit
                    if (checkConfig(rotatedShip, x, y)) {
                        int newKey;
                        if (possibleShipConfigs.isEmpty()) {
                            newKey = 1;
                        } else {
                            newKey = possibleShipConfigs.lastKey() + 1;
                        }
                        addConfig(ship, rotatedShip, newKey, x, y);
                    }
                }
            }

            //Rotate the ship and try again
            rotatedShip = rotatedShip.rotateCWNinety(1);
        }
    }

    /**
     * Functional interface for collating output matrices.
     *
     * @param <T> The type of an output matrix cell
     */
    @FunctionalInterface
    protected interface ShipFold<T> {

        T fold(int nextVal, T retVal, int divisor);
    }
}
